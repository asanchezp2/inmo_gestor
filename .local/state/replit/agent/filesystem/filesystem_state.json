{"file_contents":{"RealEstateAPI/Controllers/AdvisorsController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\nusing RealEstateAPI.Application.DTOs;\nusing RealEstateAPI.Application.Interfaces;\n\nnamespace RealEstateAPI.Controllers;\n\n[ApiController]\n[Route(\"api/advisors\")]\npublic class AdvisorsController : ControllerBase\n{\n    private readonly IAdvisorService _advisorService;\n    private readonly ILogger<AdvisorsController> _logger;\n\n    public AdvisorsController(IAdvisorService advisorService, ILogger<AdvisorsController> logger)\n    {\n        _advisorService = advisorService;\n        _logger = logger;\n    }\n\n    [HttpPost]\n    public async Task<ActionResult<AdvisorResponseDTO>> Create([FromBody] AdvisorCreateDTO dto)\n    {\n        try\n        {\n            var result = await _advisorService.CreateAsync(dto);\n            return CreatedAtAction(nameof(GetById), new { id = result.AdvisorId }, result);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating advisor\");\n            return StatusCode(500, new { error = \"An error occurred while creating the advisor\" });\n        }\n    }\n\n    [HttpGet]\n    public async Task<ActionResult<IEnumerable<AdvisorResponseDTO>>> GetAll()\n    {\n        try\n        {\n            var result = await _advisorService.GetAllAsync();\n            return Ok(result);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error retrieving advisors\");\n            return StatusCode(500, new { error = \"An error occurred while retrieving advisors\" });\n        }\n    }\n\n    [HttpGet(\"{id}\")]\n    public async Task<ActionResult<AdvisorResponseDTO>> GetById(int id)\n    {\n        try\n        {\n            var result = await _advisorService.GetByIdAsync(id);\n            \n            if (result == null)\n            {\n                return NotFound(new { error = $\"Advisor with ID {id} not found\" });\n            }\n\n            return Ok(result);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error retrieving advisor {AdvisorId}\", id);\n            return StatusCode(500, new { error = \"An error occurred while retrieving the advisor\" });\n        }\n    }\n\n    [HttpPut(\"{id}\")]\n    public async Task<ActionResult<AdvisorResponseDTO>> Update(int id, [FromBody] AdvisorUpdateDTO dto)\n    {\n        try\n        {\n            var result = await _advisorService.UpdateAsync(id, dto);\n            return Ok(result);\n        }\n        catch (KeyNotFoundException ex)\n        {\n            return NotFound(new { error = ex.Message });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating advisor {AdvisorId}\", id);\n            return StatusCode(500, new { error = \"An error occurred while updating the advisor\" });\n        }\n    }\n\n    [HttpGet(\"{id}/properties\")]\n    public async Task<ActionResult<IEnumerable<PropertyResponseDTO>>> GetProperties(int id)\n    {\n        try\n        {\n            var result = await _advisorService.GetPropertiesByAdvisorIdAsync(id);\n            return Ok(result);\n        }\n        catch (KeyNotFoundException ex)\n        {\n            return NotFound(new { error = ex.Message });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error retrieving properties for advisor {AdvisorId}\", id);\n            return StatusCode(500, new { error = \"An error occurred while retrieving advisor properties\" });\n        }\n    }\n}\n","size_bytes":3386},"RealEstateAPI/Controllers/PropertiesController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\nusing RealEstateAPI.Application.DTOs;\nusing RealEstateAPI.Application.Interfaces;\nusing RealEstateAPI.Domain.Enums;\n\nnamespace RealEstateAPI.Controllers;\n\n[ApiController]\n[Route(\"api/properties\")]\npublic class PropertiesController : ControllerBase\n{\n    private readonly IPropertyService _propertyService;\n    private readonly ILogger<PropertiesController> _logger;\n\n    public PropertiesController(IPropertyService propertyService, ILogger<PropertiesController> logger)\n    {\n        _propertyService = propertyService;\n        _logger = logger;\n    }\n\n    [HttpPost]\n    public async Task<ActionResult<PropertyResponseDTO>> Create([FromBody] PropertyCreateDTO dto)\n    {\n        try\n        {\n            var result = await _propertyService.CreateAsync(dto);\n            return CreatedAtAction(nameof(GetById), new { id = result.PropertyId }, result);\n        }\n        catch (ArgumentException ex)\n        {\n            return BadRequest(new { error = ex.Message });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating property\");\n            return StatusCode(500, new { error = \"An error occurred while creating the property\" });\n        }\n    }\n\n    [HttpGet]\n    public async Task<ActionResult<PropertyListResponseDTO>> GetAll(\n        [FromQuery] PropertyType? type,\n        [FromQuery] PropertyStatus? status,\n        [FromQuery] decimal? minPrice,\n        [FromQuery] decimal? maxPrice,\n        [FromQuery] Zone? zone,\n        [FromQuery] decimal? minArea,\n        [FromQuery] decimal? maxArea,\n        [FromQuery] int? advisorId,\n        [FromQuery] int page = 1,\n        [FromQuery] int pageSize = 20)\n    {\n        try\n        {\n            var result = await _propertyService.GetAllAsync(\n                type, status, minPrice, maxPrice, zone, minArea, maxArea, advisorId, page, pageSize);\n            return Ok(result);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error retrieving properties\");\n            return StatusCode(500, new { error = \"An error occurred while retrieving properties\" });\n        }\n    }\n\n    [HttpGet(\"{id}\")]\n    public async Task<ActionResult<PropertyResponseDTO>> GetById(string id)\n    {\n        try\n        {\n            var result = await _propertyService.GetByIdAsync(id);\n            \n            if (result == null)\n            {\n                return NotFound(new { error = $\"Property with ID {id} not found\" });\n            }\n\n            return Ok(result);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error retrieving property {PropertyId}\", id);\n            return StatusCode(500, new { error = \"An error occurred while retrieving the property\" });\n        }\n    }\n\n    [HttpPut(\"{id}\")]\n    public async Task<ActionResult<PropertyResponseDTO>> Update(string id, [FromBody] PropertyUpdateDTO dto)\n    {\n        try\n        {\n            var result = await _propertyService.UpdateAsync(id, dto);\n            return Ok(result);\n        }\n        catch (KeyNotFoundException ex)\n        {\n            return NotFound(new { error = ex.Message });\n        }\n        catch (ArgumentException ex)\n        {\n            return BadRequest(new { error = ex.Message });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating property {PropertyId}\", id);\n            return StatusCode(500, new { error = \"An error occurred while updating the property\" });\n        }\n    }\n\n    [HttpPatch(\"{id}/status\")]\n    public async Task<ActionResult<PropertyResponseDTO>> UpdateStatus(string id, [FromBody] PropertyStatusUpdateDTO dto)\n    {\n        try\n        {\n            var result = await _propertyService.UpdateStatusAsync(id, dto);\n            return Ok(result);\n        }\n        catch (KeyNotFoundException ex)\n        {\n            return NotFound(new { error = ex.Message });\n        }\n        catch (InvalidOperationException ex)\n        {\n            return BadRequest(new { error = ex.Message });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating property status {PropertyId}\", id);\n            return StatusCode(500, new { error = \"An error occurred while updating the property status\" });\n        }\n    }\n\n    [HttpDelete(\"{id}\")]\n    public async Task<ActionResult> Delete(string id)\n    {\n        try\n        {\n            await _propertyService.DeleteAsync(id);\n            return NoContent();\n        }\n        catch (KeyNotFoundException ex)\n        {\n            return NotFound(new { error = ex.Message });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error deleting property {PropertyId}\", id);\n            return StatusCode(500, new { error = \"An error occurred while deleting the property\" });\n        }\n    }\n}\n","size_bytes":4856},"RealEstateAPI/Application/DTOs/AdvisorDTO.cs":{"content":"namespace RealEstateAPI.Application.DTOs;\n\npublic class AdvisorResponseDTO\n{\n    public int AdvisorId { get; set; }\n    public string FullName { get; set; } = string.Empty;\n    public string? Email { get; set; }\n    public string PrimaryPhone { get; set; } = string.Empty;\n    public string? SecondaryPhone { get; set; }\n    public bool IsActive { get; set; }\n    public DateTime CreatedAt { get; set; }\n}\n\npublic class AdvisorSummaryDTO\n{\n    public int AdvisorId { get; set; }\n    public string FullName { get; set; } = string.Empty;\n    public string PrimaryPhone { get; set; } = string.Empty;\n}\n\npublic class AdvisorCreateDTO\n{\n    public string FullName { get; set; } = string.Empty;\n    public string? Email { get; set; }\n    public string PrimaryPhone { get; set; } = string.Empty;\n    public string? SecondaryPhone { get; set; }\n}\n\npublic class AdvisorUpdateDTO\n{\n    public string FullName { get; set; } = string.Empty;\n    public string? Email { get; set; }\n    public string PrimaryPhone { get; set; } = string.Empty;\n    public string? SecondaryPhone { get; set; }\n    public bool IsActive { get; set; }\n}\n","size_bytes":1118},"RealEstateAPI/Application/DTOs/PropertyDTO.cs":{"content":"using RealEstateAPI.Domain.Enums;\n\nnamespace RealEstateAPI.Application.DTOs;\n\npublic class PropertyResponseDTO\n{\n    public string PropertyId { get; set; } = string.Empty;\n    public string PropertyCode { get; set; } = string.Empty;\n    public string Type { get; set; } = string.Empty;\n    public string Status { get; set; } = string.Empty;\n    public string Title { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public decimal Price { get; set; }\n    public decimal Area { get; set; }\n    public string Zone { get; set; } = string.Empty;\n    public string Address { get; set; } = string.Empty;\n    public int? Bedrooms { get; set; }\n    public int? Bathrooms { get; set; }\n    public int? ParkingSpots { get; set; }\n    public bool HasImages { get; set; }\n    public List<string> ImageUrls { get; set; } = new();\n    public DateTime AvailableDate { get; set; }\n    public DateTime? ClosedDate { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime UpdatedAt { get; set; }\n    public int AdvisorId { get; set; }\n    public AdvisorSummaryDTO? Advisor { get; set; }\n}\n\npublic class PropertyCreateDTO\n{\n    public PropertyType Type { get; set; }\n    public PropertyStatus Status { get; set; }\n    public string Title { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public decimal Price { get; set; }\n    public decimal Area { get; set; }\n    public Zone Zone { get; set; }\n    public string Address { get; set; } = string.Empty;\n    public int? Bedrooms { get; set; }\n    public int? Bathrooms { get; set; }\n    public int? ParkingSpots { get; set; }\n    public List<string> ImageUrls { get; set; } = new();\n    public DateTime AvailableDate { get; set; }\n    public int AdvisorId { get; set; }\n}\n\npublic class PropertyUpdateDTO\n{\n    public string Title { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public decimal Price { get; set; }\n    public decimal Area { get; set; }\n    public string Address { get; set; } = string.Empty;\n    public int? Bedrooms { get; set; }\n    public int? Bathrooms { get; set; }\n    public int? ParkingSpots { get; set; }\n    public List<string> ImageUrls { get; set; } = new();\n    public DateTime AvailableDate { get; set; }\n}\n\npublic class PropertyStatusUpdateDTO\n{\n    public PropertyStatus Status { get; set; }\n}\n\npublic class PropertyListResponseDTO\n{\n    public IEnumerable<PropertyResponseDTO> Properties { get; set; } = new List<PropertyResponseDTO>();\n    public int TotalCount { get; set; }\n    public int Page { get; set; }\n    public int PageSize { get; set; }\n    public int TotalPages { get; set; }\n}\n","size_bytes":2706},"RealEstateAPI/Application/Interfaces/IAdvisorService.cs":{"content":"using RealEstateAPI.Application.DTOs;\n\nnamespace RealEstateAPI.Application.Interfaces;\n\npublic interface IAdvisorService\n{\n    Task<AdvisorResponseDTO?> GetByIdAsync(int id);\n    Task<IEnumerable<AdvisorResponseDTO>> GetAllAsync();\n    Task<AdvisorResponseDTO> CreateAsync(AdvisorCreateDTO dto);\n    Task<AdvisorResponseDTO> UpdateAsync(int id, AdvisorUpdateDTO dto);\n    Task<IEnumerable<PropertyResponseDTO>> GetPropertiesByAdvisorIdAsync(int advisorId);\n}\n","size_bytes":459},"RealEstateAPI/Application/Interfaces/IPropertyService.cs":{"content":"using RealEstateAPI.Application.DTOs;\nusing RealEstateAPI.Domain.Enums;\n\nnamespace RealEstateAPI.Application.Interfaces;\n\npublic interface IPropertyService\n{\n    Task<PropertyResponseDTO?> GetByIdAsync(string id);\n    Task<PropertyListResponseDTO> GetAllAsync(\n        PropertyType? type,\n        PropertyStatus? status,\n        decimal? minPrice,\n        decimal? maxPrice,\n        Zone? zone,\n        decimal? minArea,\n        decimal? maxArea,\n        int? advisorId,\n        int page,\n        int pageSize);\n    Task<PropertyResponseDTO> CreateAsync(PropertyCreateDTO dto);\n    Task<PropertyResponseDTO> UpdateAsync(string id, PropertyUpdateDTO dto);\n    Task<PropertyResponseDTO> UpdateStatusAsync(string id, PropertyStatusUpdateDTO dto);\n    Task DeleteAsync(string id);\n}\n","size_bytes":779},"RealEstateAPI/Application/Mappings/MappingProfile.cs":{"content":"using AutoMapper;\nusing RealEstateAPI.Application.DTOs;\nusing RealEstateAPI.Domain.Entities;\nusing System.Text.Json;\n\nnamespace RealEstateAPI.Application.Mappings;\n\npublic class MappingProfile : Profile\n{\n    public MappingProfile()\n    {\n        CreateMap<Property, PropertyResponseDTO>()\n            .ForMember(dest => dest.Type, opt => opt.MapFrom(src => src.Type.ToString()))\n            .ForMember(dest => dest.Status, opt => opt.MapFrom(src => src.Status.ToString()))\n            .ForMember(dest => dest.Zone, opt => opt.MapFrom(src => src.Zone.ToString()))\n            .ForMember(dest => dest.ImageUrls, opt => opt.MapFrom(src => \n                JsonSerializer.Deserialize<List<string>>(src.ImageUrls) ?? new List<string>()));\n\n        CreateMap<PropertyCreateDTO, Property>()\n            .ForMember(dest => dest.PropertyId, opt => opt.Ignore())\n            .ForMember(dest => dest.PropertyCode, opt => opt.Ignore())\n            .ForMember(dest => dest.HasImages, opt => opt.MapFrom(src => src.ImageUrls.Any()))\n            .ForMember(dest => dest.ImageUrls, opt => opt.MapFrom(src => JsonSerializer.Serialize(src.ImageUrls)))\n            .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => DateTime.UtcNow))\n            .ForMember(dest => dest.UpdatedAt, opt => opt.MapFrom(src => DateTime.UtcNow))\n            .ForMember(dest => dest.ClosedDate, opt => opt.Ignore());\n\n        CreateMap<PropertyUpdateDTO, Property>()\n            .ForMember(dest => dest.HasImages, opt => opt.MapFrom(src => src.ImageUrls.Any()))\n            .ForMember(dest => dest.ImageUrls, opt => opt.MapFrom(src => JsonSerializer.Serialize(src.ImageUrls)))\n            .ForMember(dest => dest.UpdatedAt, opt => opt.MapFrom(src => DateTime.UtcNow))\n            .ForAllOtherMembers(opt => opt.Ignore());\n\n        CreateMap<Advisor, AdvisorResponseDTO>();\n        CreateMap<Advisor, AdvisorSummaryDTO>();\n        CreateMap<AdvisorCreateDTO, Advisor>()\n            .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => DateTime.UtcNow));\n        CreateMap<AdvisorUpdateDTO, Advisor>()\n            .ForAllOtherMembers(opt => opt.Ignore());\n    }\n}\n","size_bytes":2140},"RealEstateAPI/Application/Services/AdvisorService.cs":{"content":"using AutoMapper;\nusing RealEstateAPI.Application.DTOs;\nusing RealEstateAPI.Application.Interfaces;\nusing RealEstateAPI.Domain.Entities;\nusing RealEstateAPI.Domain.Interfaces;\n\nnamespace RealEstateAPI.Application.Services;\n\npublic class AdvisorService : IAdvisorService\n{\n    private readonly IAdvisorRepository _advisorRepository;\n    private readonly IMapper _mapper;\n    private readonly ILogger<AdvisorService> _logger;\n\n    public AdvisorService(\n        IAdvisorRepository advisorRepository,\n        IMapper mapper,\n        ILogger<AdvisorService> logger)\n    {\n        _advisorRepository = advisorRepository;\n        _mapper = mapper;\n        _logger = logger;\n    }\n\n    public async Task<AdvisorResponseDTO?> GetByIdAsync(int id)\n    {\n        var advisor = await _advisorRepository.GetByIdAsync(id);\n        return advisor == null ? null : _mapper.Map<AdvisorResponseDTO>(advisor);\n    }\n\n    public async Task<IEnumerable<AdvisorResponseDTO>> GetAllAsync()\n    {\n        var advisors = await _advisorRepository.GetAllAsync();\n        return _mapper.Map<IEnumerable<AdvisorResponseDTO>>(advisors);\n    }\n\n    public async Task<AdvisorResponseDTO> CreateAsync(AdvisorCreateDTO dto)\n    {\n        var advisor = _mapper.Map<Advisor>(dto);\n        \n        var createdAdvisor = await _advisorRepository.CreateAsync(advisor);\n        \n        _logger.LogInformation(\"Advisor created: {AdvisorId} - {FullName}\", createdAdvisor.AdvisorId, createdAdvisor.FullName);\n        \n        return _mapper.Map<AdvisorResponseDTO>(createdAdvisor);\n    }\n\n    public async Task<AdvisorResponseDTO> UpdateAsync(int id, AdvisorUpdateDTO dto)\n    {\n        var existingAdvisor = await _advisorRepository.GetByIdAsync(id);\n        \n        if (existingAdvisor == null)\n        {\n            throw new KeyNotFoundException($\"Advisor with ID {id} not found\");\n        }\n\n        _mapper.Map(dto, existingAdvisor);\n        \n        var updatedAdvisor = await _advisorRepository.UpdateAsync(existingAdvisor);\n        \n        _logger.LogInformation(\"Advisor updated: {AdvisorId} - {FullName}\", updatedAdvisor.AdvisorId, updatedAdvisor.FullName);\n        \n        return _mapper.Map<AdvisorResponseDTO>(updatedAdvisor);\n    }\n\n    public async Task<IEnumerable<PropertyResponseDTO>> GetPropertiesByAdvisorIdAsync(int advisorId)\n    {\n        if (!await _advisorRepository.ExistsAsync(advisorId))\n        {\n            throw new KeyNotFoundException($\"Advisor with ID {advisorId} not found\");\n        }\n\n        var properties = await _advisorRepository.GetPropertiesByAdvisorIdAsync(advisorId);\n        return _mapper.Map<IEnumerable<PropertyResponseDTO>>(properties);\n    }\n}\n","size_bytes":2660},"RealEstateAPI/Application/Services/PropertyService.cs":{"content":"using AutoMapper;\nusing RealEstateAPI.Application.DTOs;\nusing RealEstateAPI.Application.Interfaces;\nusing RealEstateAPI.Domain.Entities;\nusing RealEstateAPI.Domain.Enums;\nusing RealEstateAPI.Domain.Interfaces;\n\nnamespace RealEstateAPI.Application.Services;\n\npublic class PropertyService : IPropertyService\n{\n    private readonly IPropertyRepository _propertyRepository;\n    private readonly IAdvisorRepository _advisorRepository;\n    private readonly IMapper _mapper;\n    private readonly ILogger<PropertyService> _logger;\n\n    public PropertyService(\n        IPropertyRepository propertyRepository,\n        IAdvisorRepository advisorRepository,\n        IMapper mapper,\n        ILogger<PropertyService> logger)\n    {\n        _propertyRepository = propertyRepository;\n        _advisorRepository = advisorRepository;\n        _mapper = mapper;\n        _logger = logger;\n    }\n\n    public async Task<PropertyResponseDTO?> GetByIdAsync(string id)\n    {\n        var property = await _propertyRepository.GetByIdAsync(id);\n        return property == null ? null : _mapper.Map<PropertyResponseDTO>(property);\n    }\n\n    public async Task<PropertyListResponseDTO> GetAllAsync(\n        PropertyType? type,\n        PropertyStatus? status,\n        decimal? minPrice,\n        decimal? maxPrice,\n        Zone? zone,\n        decimal? minArea,\n        decimal? maxArea,\n        int? advisorId,\n        int page,\n        int pageSize)\n    {\n        var (properties, totalCount) = await _propertyRepository.GetAllAsync(\n            type, status, minPrice, maxPrice, zone, minArea, maxArea, advisorId, page, pageSize);\n\n        var propertyDTOs = _mapper.Map<IEnumerable<PropertyResponseDTO>>(properties);\n        var totalPages = (int)Math.Ceiling(totalCount / (double)pageSize);\n\n        return new PropertyListResponseDTO\n        {\n            Properties = propertyDTOs,\n            TotalCount = totalCount,\n            Page = page,\n            PageSize = pageSize,\n            TotalPages = totalPages\n        };\n    }\n\n    public async Task<PropertyResponseDTO> CreateAsync(PropertyCreateDTO dto)\n    {\n        if (!await _advisorRepository.ExistsAsync(dto.AdvisorId))\n        {\n            throw new ArgumentException($\"Advisor with ID {dto.AdvisorId} does not exist\");\n        }\n\n        var property = _mapper.Map<Property>(dto);\n        \n        property.PropertyCode = GeneratePropertyCode(dto.Type, dto.Zone);\n        property.PropertyId = property.PropertyCode;\n\n        if (dto.Status == PropertyStatus.Vendido || dto.Status == PropertyStatus.NoDisponible)\n        {\n            property.ClosedDate = DateTime.UtcNow;\n        }\n\n        var createdProperty = await _propertyRepository.CreateAsync(property);\n        \n        _logger.LogInformation(\"Property created: {PropertyCode}\", createdProperty.PropertyCode);\n        \n        return _mapper.Map<PropertyResponseDTO>(await _propertyRepository.GetByIdAsync(createdProperty.PropertyId));\n    }\n\n    public async Task<PropertyResponseDTO> UpdateAsync(string id, PropertyUpdateDTO dto)\n    {\n        var existingProperty = await _propertyRepository.GetByIdAsync(id);\n        \n        if (existingProperty == null)\n        {\n            throw new KeyNotFoundException($\"Property with ID {id} not found\");\n        }\n\n        _mapper.Map(dto, existingProperty);\n\n        if (dto.AvailableDate < existingProperty.CreatedAt)\n        {\n            throw new ArgumentException(\"Available date cannot be earlier than creation date\");\n        }\n\n        var updatedProperty = await _propertyRepository.UpdateAsync(existingProperty);\n        \n        _logger.LogInformation(\"Property updated: {PropertyCode}\", updatedProperty.PropertyCode);\n        \n        return _mapper.Map<PropertyResponseDTO>(await _propertyRepository.GetByIdAsync(updatedProperty.PropertyId));\n    }\n\n    public async Task<PropertyResponseDTO> UpdateStatusAsync(string id, PropertyStatusUpdateDTO dto)\n    {\n        var existingProperty = await _propertyRepository.GetByIdAsync(id);\n        \n        if (existingProperty == null)\n        {\n            throw new KeyNotFoundException($\"Property with ID {id} not found\");\n        }\n\n        if (existingProperty.Status == PropertyStatus.Vendido && dto.Status == PropertyStatus.EnVenta)\n        {\n            throw new InvalidOperationException(\"Cannot change status from Vendido to EnVenta. Create a new property instead.\");\n        }\n\n        existingProperty.Status = dto.Status;\n\n        if (dto.Status == PropertyStatus.Vendido || dto.Status == PropertyStatus.NoDisponible)\n        {\n            existingProperty.ClosedDate = DateTime.UtcNow;\n        }\n        else\n        {\n            existingProperty.ClosedDate = null;\n        }\n\n        var updatedProperty = await _propertyRepository.UpdateAsync(existingProperty);\n        \n        _logger.LogInformation(\"Property status updated: {PropertyCode} to {Status}\", updatedProperty.PropertyCode, dto.Status);\n        \n        return _mapper.Map<PropertyResponseDTO>(await _propertyRepository.GetByIdAsync(updatedProperty.PropertyId));\n    }\n\n    public async Task DeleteAsync(string id)\n    {\n        if (!await _propertyRepository.ExistsAsync(id))\n        {\n            throw new KeyNotFoundException($\"Property with ID {id} not found\");\n        }\n\n        await _propertyRepository.DeleteAsync(id);\n        \n        _logger.LogInformation(\"Property deleted: {PropertyId}\", id);\n    }\n\n    private string GeneratePropertyCode(PropertyType type, Zone zone)\n    {\n        var random = new Random();\n        var randomNumber = random.Next(10000, 99999);\n        return $\"{type.ToString().ToUpper()}-{zone.ToString().ToUpper()}-{randomNumber}\";\n    }\n}\n","size_bytes":5659},"RealEstateAPI/Application/Validators/AdvisorValidator.cs":{"content":"using FluentValidation;\nusing RealEstateAPI.Application.DTOs;\nusing System.Text.RegularExpressions;\n\nnamespace RealEstateAPI.Application.Validators;\n\npublic class AdvisorCreateValidator : AbstractValidator<AdvisorCreateDTO>\n{\n    public AdvisorCreateValidator()\n    {\n        RuleFor(x => x.FullName)\n            .NotEmpty().WithMessage(\"Full name is required\")\n            .MaximumLength(100).WithMessage(\"Full name cannot exceed 100 characters\");\n\n        RuleFor(x => x.Email)\n            .EmailAddress().When(x => !string.IsNullOrEmpty(x.Email))\n            .WithMessage(\"Invalid email format\");\n\n        RuleFor(x => x.PrimaryPhone)\n            .NotEmpty().WithMessage(\"Primary phone is required\")\n            .MaximumLength(20).WithMessage(\"Primary phone cannot exceed 20 characters\");\n\n        RuleFor(x => x.SecondaryPhone)\n            .MaximumLength(20).When(x => !string.IsNullOrEmpty(x.SecondaryPhone))\n            .WithMessage(\"Secondary phone cannot exceed 20 characters\");\n\n        RuleFor(x => x)\n            .Must(x => !string.IsNullOrEmpty(x.PrimaryPhone) || !string.IsNullOrEmpty(x.SecondaryPhone))\n            .WithMessage(\"At least one phone number is required\");\n    }\n}\n\npublic class AdvisorUpdateValidator : AbstractValidator<AdvisorUpdateDTO>\n{\n    public AdvisorUpdateValidator()\n    {\n        RuleFor(x => x.FullName)\n            .NotEmpty().WithMessage(\"Full name is required\")\n            .MaximumLength(100).WithMessage(\"Full name cannot exceed 100 characters\");\n\n        RuleFor(x => x.Email)\n            .EmailAddress().When(x => !string.IsNullOrEmpty(x.Email))\n            .WithMessage(\"Invalid email format\");\n\n        RuleFor(x => x.PrimaryPhone)\n            .NotEmpty().WithMessage(\"Primary phone is required\")\n            .MaximumLength(20).WithMessage(\"Primary phone cannot exceed 20 characters\");\n\n        RuleFor(x => x.SecondaryPhone)\n            .MaximumLength(20).When(x => !string.IsNullOrEmpty(x.SecondaryPhone))\n            .WithMessage(\"Secondary phone cannot exceed 20 characters\");\n\n        RuleFor(x => x)\n            .Must(x => !string.IsNullOrEmpty(x.PrimaryPhone) || !string.IsNullOrEmpty(x.SecondaryPhone))\n            .WithMessage(\"At least one phone number is required\");\n    }\n}\n","size_bytes":2235},"RealEstateAPI/Application/Validators/PropertyValidator.cs":{"content":"using FluentValidation;\nusing RealEstateAPI.Application.DTOs;\nusing RealEstateAPI.Domain.Enums;\n\nnamespace RealEstateAPI.Application.Validators;\n\npublic class PropertyCreateValidator : AbstractValidator<PropertyCreateDTO>\n{\n    public PropertyCreateValidator()\n    {\n        RuleFor(x => x.Title)\n            .NotEmpty().WithMessage(\"Title is required\")\n            .MaximumLength(100).WithMessage(\"Title cannot exceed 100 characters\");\n\n        RuleFor(x => x.Description)\n            .NotEmpty().WithMessage(\"Description is required\")\n            .MaximumLength(1000).WithMessage(\"Description cannot exceed 1000 characters\");\n\n        RuleFor(x => x.Price)\n            .GreaterThan(0).WithMessage(\"Price must be greater than 0\");\n\n        RuleFor(x => x.Area)\n            .GreaterThan(0).WithMessage(\"Area must be greater than 0\");\n\n        RuleFor(x => x.Address)\n            .NotEmpty().WithMessage(\"Address is required\")\n            .MaximumLength(200).WithMessage(\"Address cannot exceed 200 characters\");\n\n        RuleFor(x => x.AvailableDate)\n            .GreaterThanOrEqualTo(DateTime.UtcNow.Date)\n            .WithMessage(\"Available date cannot be in the past\");\n\n        RuleFor(x => x.ImageUrls)\n            .Must(x => x.Count <= 10)\n            .WithMessage(\"Maximum 10 images allowed\");\n\n        RuleFor(x => x.AdvisorId)\n            .GreaterThan(0).WithMessage(\"Valid advisor is required\");\n    }\n}\n\npublic class PropertyUpdateValidator : AbstractValidator<PropertyUpdateDTO>\n{\n    public PropertyUpdateValidator()\n    {\n        RuleFor(x => x.Title)\n            .NotEmpty().WithMessage(\"Title is required\")\n            .MaximumLength(100).WithMessage(\"Title cannot exceed 100 characters\");\n\n        RuleFor(x => x.Description)\n            .NotEmpty().WithMessage(\"Description is required\")\n            .MaximumLength(1000).WithMessage(\"Description cannot exceed 1000 characters\");\n\n        RuleFor(x => x.Price)\n            .GreaterThan(0).WithMessage(\"Price must be greater than 0\");\n\n        RuleFor(x => x.Area)\n            .GreaterThan(0).WithMessage(\"Area must be greater than 0\");\n\n        RuleFor(x => x.Address)\n            .NotEmpty().WithMessage(\"Address is required\")\n            .MaximumLength(200).WithMessage(\"Address cannot exceed 200 characters\");\n\n        RuleFor(x => x.ImageUrls)\n            .Must(x => x.Count <= 10)\n            .WithMessage(\"Maximum 10 images allowed\");\n    }\n}\n\npublic class PropertyStatusUpdateValidator : AbstractValidator<PropertyStatusUpdateDTO>\n{\n    public PropertyStatusUpdateValidator()\n    {\n        RuleFor(x => x.Status)\n            .IsInEnum().WithMessage(\"Invalid status value\");\n    }\n}\n","size_bytes":2655},"RealEstateAPI/Domain/Entities/Advisor.cs":{"content":"namespace RealEstateAPI.Domain.Entities;\n\npublic class Advisor\n{\n    public int AdvisorId { get; set; }\n    public string FullName { get; set; } = string.Empty;\n    public string? Email { get; set; }\n    public string PrimaryPhone { get; set; } = string.Empty;\n    public string? SecondaryPhone { get; set; }\n    public bool IsActive { get; set; } = true;\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    \n    public ICollection<Property> Properties { get; set; } = new List<Property>();\n}\n","size_bytes":508},"RealEstateAPI/Domain/Entities/Property.cs":{"content":"using RealEstateAPI.Domain.Enums;\n\nnamespace RealEstateAPI.Domain.Entities;\n\npublic class Property\n{\n    public string PropertyId { get; set; } = string.Empty;\n    public string PropertyCode { get; set; } = string.Empty;\n    public PropertyType Type { get; set; }\n    public PropertyStatus Status { get; set; }\n    public string Title { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public decimal Price { get; set; }\n    public decimal Area { get; set; }\n    public Zone Zone { get; set; }\n    public string Address { get; set; } = string.Empty;\n    public int? Bedrooms { get; set; }\n    public int? Bathrooms { get; set; }\n    public int? ParkingSpots { get; set; }\n    public bool HasImages { get; set; }\n    public string ImageUrls { get; set; } = \"[]\";\n    public DateTime AvailableDate { get; set; }\n    public DateTime? ClosedDate { get; set; }\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    public int AdvisorId { get; set; }\n    \n    public Advisor? Advisor { get; set; }\n}\n","size_bytes":1113},"RealEstateAPI/Domain/Enums/PropertyStatus.cs":{"content":"namespace RealEstateAPI.Domain.Enums;\n\npublic enum PropertyStatus\n{\n    EnVenta,\n    EnAlquiler,\n    EnAnticredito,\n    Vendido,\n    NoDisponible\n}\n","size_bytes":148},"RealEstateAPI/Domain/Enums/PropertyType.cs":{"content":"namespace RealEstateAPI.Domain.Enums;\n\npublic enum PropertyType\n{\n    Terreno,\n    Casa,\n    Departamento,\n    LocalComercial,\n    Oficina\n}\n","size_bytes":141},"RealEstateAPI/Domain/Enums/Zone.cs":{"content":"namespace RealEstateAPI.Domain.Enums;\n\npublic enum Zone\n{\n    Norte,\n    Sur,\n    Este,\n    Oeste,\n    Centro\n}\n","size_bytes":112},"RealEstateAPI/Domain/Interfaces/IAdvisorRepository.cs":{"content":"using RealEstateAPI.Domain.Entities;\n\nnamespace RealEstateAPI.Domain.Interfaces;\n\npublic interface IAdvisorRepository\n{\n    Task<Advisor?> GetByIdAsync(int id);\n    Task<IEnumerable<Advisor>> GetAllAsync();\n    Task<Advisor> CreateAsync(Advisor advisor);\n    Task<Advisor> UpdateAsync(Advisor advisor);\n    Task<IEnumerable<Property>> GetPropertiesByAdvisorIdAsync(int advisorId);\n    Task<bool> ExistsAsync(int id);\n}\n","size_bytes":419},"RealEstateAPI/Domain/Interfaces/IPropertyRepository.cs":{"content":"using RealEstateAPI.Domain.Entities;\nusing RealEstateAPI.Domain.Enums;\n\nnamespace RealEstateAPI.Domain.Interfaces;\n\npublic interface IPropertyRepository\n{\n    Task<Property?> GetByIdAsync(string id);\n    Task<(IEnumerable<Property> Properties, int TotalCount)> GetAllAsync(\n        PropertyType? type,\n        PropertyStatus? status,\n        decimal? minPrice,\n        decimal? maxPrice,\n        Zone? zone,\n        decimal? minArea,\n        decimal? maxArea,\n        int? advisorId,\n        int page,\n        int pageSize);\n    Task<Property> CreateAsync(Property property);\n    Task<Property> UpdateAsync(Property property);\n    Task DeleteAsync(string id);\n    Task<bool> ExistsAsync(string id);\n}\n","size_bytes":701},"RealEstateAPI/Infrastructure/Configurations/AdvisorConfiguration.cs":{"content":"using Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\nusing RealEstateAPI.Domain.Entities;\n\nnamespace RealEstateAPI.Infrastructure.Configurations;\n\npublic class AdvisorConfiguration : IEntityTypeConfiguration<Advisor>\n{\n    public void Configure(EntityTypeBuilder<Advisor> builder)\n    {\n        builder.HasKey(a => a.AdvisorId);\n\n        builder.Property(a => a.AdvisorId)\n            .ValueGeneratedOnAdd();\n\n        builder.Property(a => a.FullName)\n            .IsRequired()\n            .HasMaxLength(100);\n\n        builder.Property(a => a.Email)\n            .HasMaxLength(100);\n\n        builder.Property(a => a.PrimaryPhone)\n            .IsRequired()\n            .HasMaxLength(20);\n\n        builder.Property(a => a.SecondaryPhone)\n            .HasMaxLength(20);\n\n        builder.Property(a => a.IsActive)\n            .IsRequired()\n            .HasDefaultValue(true);\n\n        builder.HasMany(a => a.Properties)\n            .WithOne(p => p.Advisor)\n            .HasForeignKey(p => p.AdvisorId);\n    }\n}\n","size_bytes":1045},"RealEstateAPI/Infrastructure/Configurations/PropertyConfiguration.cs":{"content":"using Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\nusing RealEstateAPI.Domain.Entities;\n\nnamespace RealEstateAPI.Infrastructure.Configurations;\n\npublic class PropertyConfiguration : IEntityTypeConfiguration<Property>\n{\n    public void Configure(EntityTypeBuilder<Property> builder)\n    {\n        builder.HasKey(p => p.PropertyId);\n\n        builder.Property(p => p.PropertyId)\n            .IsRequired()\n            .HasMaxLength(50);\n\n        builder.Property(p => p.PropertyCode)\n            .IsRequired()\n            .HasMaxLength(50);\n\n        builder.HasIndex(p => p.PropertyCode)\n            .IsUnique();\n\n        builder.Property(p => p.Title)\n            .IsRequired()\n            .HasMaxLength(100);\n\n        builder.Property(p => p.Description)\n            .IsRequired()\n            .HasMaxLength(1000);\n\n        builder.Property(p => p.Price)\n            .HasColumnType(\"decimal(18,2)\")\n            .IsRequired();\n\n        builder.Property(p => p.Area)\n            .HasColumnType(\"decimal(10,2)\")\n            .IsRequired();\n\n        builder.Property(p => p.Address)\n            .IsRequired()\n            .HasMaxLength(200);\n\n        builder.Property(p => p.ImageUrls)\n            .HasMaxLength(2000);\n\n        builder.Property(p => p.Type)\n            .HasConversion<string>()\n            .IsRequired();\n\n        builder.Property(p => p.Status)\n            .HasConversion<string>()\n            .IsRequired();\n\n        builder.Property(p => p.Zone)\n            .HasConversion<string>()\n            .IsRequired();\n\n        builder.HasOne(p => p.Advisor)\n            .WithMany(a => a.Properties)\n            .HasForeignKey(p => p.AdvisorId)\n            .OnDelete(DeleteBehavior.Restrict);\n\n        builder.HasIndex(p => p.Type);\n        builder.HasIndex(p => p.Status);\n        builder.HasIndex(p => p.Zone);\n        builder.HasIndex(p => p.Price);\n    }\n}\n","size_bytes":1904},"RealEstateAPI/Infrastructure/Data/ApplicationDbContext.cs":{"content":"using Microsoft.EntityFrameworkCore;\nusing RealEstateAPI.Domain.Entities;\n\nnamespace RealEstateAPI.Infrastructure.Data;\n\npublic class ApplicationDbContext : DbContext\n{\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)\n        : base(options)\n    {\n    }\n\n    public DbSet<Property> Properties { get; set; }\n    public DbSet<Advisor> Advisors { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        base.OnModelCreating(modelBuilder);\n\n        modelBuilder.ApplyConfigurationsFromAssembly(typeof(ApplicationDbContext).Assembly);\n    }\n}\n","size_bytes":611},"RealEstateAPI/Infrastructure/Repositories/AdvisorRepository.cs":{"content":"using Microsoft.EntityFrameworkCore;\nusing RealEstateAPI.Domain.Entities;\nusing RealEstateAPI.Domain.Interfaces;\nusing RealEstateAPI.Infrastructure.Data;\n\nnamespace RealEstateAPI.Infrastructure.Repositories;\n\npublic class AdvisorRepository : IAdvisorRepository\n{\n    private readonly ApplicationDbContext _context;\n\n    public AdvisorRepository(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task<Advisor?> GetByIdAsync(int id)\n    {\n        return await _context.Advisors\n            .Include(a => a.Properties)\n            .FirstOrDefaultAsync(a => a.AdvisorId == id);\n    }\n\n    public async Task<IEnumerable<Advisor>> GetAllAsync()\n    {\n        return await _context.Advisors\n            .OrderBy(a => a.FullName)\n            .ToListAsync();\n    }\n\n    public async Task<Advisor> CreateAsync(Advisor advisor)\n    {\n        await _context.Advisors.AddAsync(advisor);\n        await _context.SaveChangesAsync();\n        return advisor;\n    }\n\n    public async Task<Advisor> UpdateAsync(Advisor advisor)\n    {\n        _context.Advisors.Update(advisor);\n        await _context.SaveChangesAsync();\n        return advisor;\n    }\n\n    public async Task<IEnumerable<Property>> GetPropertiesByAdvisorIdAsync(int advisorId)\n    {\n        return await _context.Properties\n            .Where(p => p.AdvisorId == advisorId)\n            .OrderByDescending(p => p.CreatedAt)\n            .ToListAsync();\n    }\n\n    public async Task<bool> ExistsAsync(int id)\n    {\n        return await _context.Advisors.AnyAsync(a => a.AdvisorId == id);\n    }\n}\n","size_bytes":1575},"RealEstateAPI/Infrastructure/Repositories/PropertyRepository.cs":{"content":"using Microsoft.EntityFrameworkCore;\nusing RealEstateAPI.Domain.Entities;\nusing RealEstateAPI.Domain.Enums;\nusing RealEstateAPI.Domain.Interfaces;\nusing RealEstateAPI.Infrastructure.Data;\n\nnamespace RealEstateAPI.Infrastructure.Repositories;\n\npublic class PropertyRepository : IPropertyRepository\n{\n    private readonly ApplicationDbContext _context;\n\n    public PropertyRepository(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task<Property?> GetByIdAsync(string id)\n    {\n        return await _context.Properties\n            .Include(p => p.Advisor)\n            .FirstOrDefaultAsync(p => p.PropertyId == id);\n    }\n\n    public async Task<(IEnumerable<Property> Properties, int TotalCount)> GetAllAsync(\n        PropertyType? type,\n        PropertyStatus? status,\n        decimal? minPrice,\n        decimal? maxPrice,\n        Zone? zone,\n        decimal? minArea,\n        decimal? maxArea,\n        int? advisorId,\n        int page,\n        int pageSize)\n    {\n        var query = _context.Properties.Include(p => p.Advisor).AsQueryable();\n\n        if (type.HasValue)\n            query = query.Where(p => p.Type == type.Value);\n\n        if (status.HasValue)\n            query = query.Where(p => p.Status == status.Value);\n\n        if (minPrice.HasValue)\n            query = query.Where(p => p.Price >= minPrice.Value);\n\n        if (maxPrice.HasValue)\n            query = query.Where(p => p.Price <= maxPrice.Value);\n\n        if (zone.HasValue)\n            query = query.Where(p => p.Zone == zone.Value);\n\n        if (minArea.HasValue)\n            query = query.Where(p => p.Area >= minArea.Value);\n\n        if (maxArea.HasValue)\n            query = query.Where(p => p.Area <= maxArea.Value);\n\n        if (advisorId.HasValue)\n            query = query.Where(p => p.AdvisorId == advisorId.Value);\n\n        var totalCount = await query.CountAsync();\n\n        var properties = await query\n            .OrderByDescending(p => p.CreatedAt)\n            .Skip((page - 1) * pageSize)\n            .Take(pageSize)\n            .ToListAsync();\n\n        return (properties, totalCount);\n    }\n\n    public async Task<Property> CreateAsync(Property property)\n    {\n        await _context.Properties.AddAsync(property);\n        await _context.SaveChangesAsync();\n        return property;\n    }\n\n    public async Task<Property> UpdateAsync(Property property)\n    {\n        property.UpdatedAt = DateTime.UtcNow;\n        _context.Properties.Update(property);\n        await _context.SaveChangesAsync();\n        return property;\n    }\n\n    public async Task DeleteAsync(string id)\n    {\n        var property = await _context.Properties.FindAsync(id);\n        if (property != null)\n        {\n            _context.Properties.Remove(property);\n            await _context.SaveChangesAsync();\n        }\n    }\n\n    public async Task<bool> ExistsAsync(string id)\n    {\n        return await _context.Properties.AnyAsync(p => p.PropertyId == id);\n    }\n}\n","size_bytes":2966},"RealEstateAPI/Infrastructure/Data/Seed/DatabaseSeeder.cs":{"content":"using Microsoft.EntityFrameworkCore;\nusing RealEstateAPI.Domain.Entities;\nusing RealEstateAPI.Domain.Enums;\n\nnamespace RealEstateAPI.Infrastructure.Data.Seed;\n\npublic static class DatabaseSeeder\n{\n    public static async Task SeedAsync(ApplicationDbContext context)\n    {\n        if (await context.Advisors.AnyAsync())\n        {\n            return;\n        }\n\n        var advisors = new List<Advisor>\n        {\n            new Advisor\n            {\n                FullName = \"María García González\",\n                Email = \"maria.garcia@realestate.com\",\n                PrimaryPhone = \"+52 55 1234 5678\",\n                SecondaryPhone = \"+52 55 8765 4321\",\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow.AddMonths(-6)\n            },\n            new Advisor\n            {\n                FullName = \"Carlos Rodríguez Pérez\",\n                Email = \"carlos.rodriguez@realestate.com\",\n                PrimaryPhone = \"+52 55 2345 6789\",\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow.AddMonths(-5)\n            },\n            new Advisor\n            {\n                FullName = \"Ana Martínez López\",\n                Email = \"ana.martinez@realestate.com\",\n                PrimaryPhone = \"+52 55 3456 7890\",\n                SecondaryPhone = \"+52 55 9876 5432\",\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow.AddMonths(-4)\n            },\n            new Advisor\n            {\n                FullName = \"Luis Hernández Silva\",\n                PrimaryPhone = \"+52 55 4567 8901\",\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow.AddMonths(-3)\n            },\n            new Advisor\n            {\n                FullName = \"Patricia Sánchez Torres\",\n                Email = \"patricia.sanchez@realestate.com\",\n                PrimaryPhone = \"+52 55 5678 9012\",\n                SecondaryPhone = \"+52 55 8765 1234\",\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow.AddMonths(-2)\n            }\n        };\n\n        await context.Advisors.AddRangeAsync(advisors);\n        await context.SaveChangesAsync();\n\n        var random = new Random(12345);\n        var properties = new List<Property>\n        {\n            new Property\n            {\n                PropertyId = \"CASA-NORTE-47382\",\n                PropertyCode = \"CASA-NORTE-47382\",\n                Type = PropertyType.Casa,\n                Status = PropertyStatus.EnVenta,\n                Title = \"Casa moderna en zona residencial\",\n                Description = \"Hermosa casa de 3 recámaras con acabados de lujo, jardín amplio y cochera para 2 autos. Ubicada en zona tranquila y segura.\",\n                Price = 3500000,\n                Area = 250,\n                Zone = Zone.Norte,\n                Address = \"Av. Pino Suárez 245, Col. Residencial Norte\",\n                Bedrooms = 3,\n                Bathrooms = 2,\n                ParkingSpots = 2,\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Casa+Moderna\\\", \\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Interior\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-30),\n                CreatedAt = DateTime.UtcNow.AddDays(-30),\n                UpdatedAt = DateTime.UtcNow.AddDays(-30),\n                AdvisorId = 1\n            },\n            new Property\n            {\n                PropertyId = \"DEPTO-CENTRO-89234\",\n                PropertyCode = \"DEPTO-CENTRO-89234\",\n                Type = PropertyType.Departamento,\n                Status = PropertyStatus.EnAlquiler,\n                Title = \"Departamento céntrico con vista panorámica\",\n                Description = \"Departamento amueblado de 2 recámaras en piso 12, con vista a la ciudad. Incluye amenidades completas.\",\n                Price = 15000,\n                Area = 95,\n                Zone = Zone.Centro,\n                Address = \"Calle Reforma 890, Centro Histórico\",\n                Bedrooms = 2,\n                Bathrooms = 1,\n                ParkingSpots = 1,\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Departamento+Centro\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-25),\n                CreatedAt = DateTime.UtcNow.AddDays(-25),\n                UpdatedAt = DateTime.UtcNow.AddDays(-25),\n                AdvisorId = 2\n            },\n            new Property\n            {\n                PropertyId = \"TERRENO-SUR-56789\",\n                PropertyCode = \"TERRENO-SUR-56789\",\n                Type = PropertyType.Terreno,\n                Status = PropertyStatus.EnVenta,\n                Title = \"Terreno comercial sobre avenida principal\",\n                Description = \"Terreno plano ideal para desarrollo comercial o residencial. Todos los servicios disponibles.\",\n                Price = 2800000,\n                Area = 500,\n                Zone = Zone.Sur,\n                Address = \"Av. Insurgentes Sur Km 8.5\",\n                HasImages = false,\n                ImageUrls = \"[]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-20),\n                CreatedAt = DateTime.UtcNow.AddDays(-20),\n                UpdatedAt = DateTime.UtcNow.AddDays(-20),\n                AdvisorId = 1\n            },\n            new Property\n            {\n                PropertyId = \"LOCAL-ESTE-12345\",\n                PropertyCode = \"LOCAL-ESTE-12345\",\n                Type = PropertyType.LocalComercial,\n                Status = PropertyStatus.EnAlquiler,\n                Title = \"Local comercial en plaza establecida\",\n                Description = \"Local comercial de 80m² en plaza con alto tráfico peatonal y vehicular. Baño y bodega incluidos.\",\n                Price = 22000,\n                Area = 80,\n                Zone = Zone.Este,\n                Address = \"Plaza del Sol, Local 15-A\",\n                Bathrooms = 1,\n                ParkingSpots = 2,\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Local+Comercial\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-15),\n                CreatedAt = DateTime.UtcNow.AddDays(-15),\n                UpdatedAt = DateTime.UtcNow.AddDays(-15),\n                AdvisorId = 3\n            },\n            new Property\n            {\n                PropertyId = \"OFICINA-OESTE-67890\",\n                PropertyCode = \"OFICINA-OESTE-67890\",\n                Type = PropertyType.Oficina,\n                Status = PropertyStatus.EnAnticredito,\n                Title = \"Oficina ejecutiva en torre corporativa\",\n                Description = \"Oficina amueblada con 3 privados, sala de juntas, kitchenette y baños. Incluye 3 cajones de estacionamiento.\",\n                Price = 4200000,\n                Area = 120,\n                Zone = Zone.Oeste,\n                Address = \"Torre Empresarial Poniente, Piso 8\",\n                Bathrooms = 2,\n                ParkingSpots = 3,\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Oficina+Ejecutiva\\\", \\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Sala+Juntas\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-10),\n                CreatedAt = DateTime.UtcNow.AddDays(-10),\n                UpdatedAt = DateTime.UtcNow.AddDays(-10),\n                AdvisorId = 4\n            },\n            new Property\n            {\n                PropertyId = \"CASA-CENTRO-23456\",\n                PropertyCode = \"CASA-CENTRO-23456\",\n                Type = PropertyType.Casa,\n                Status = PropertyStatus.Vendido,\n                Title = \"Casa colonial restaurada\",\n                Description = \"Casa histórica completamente restaurada con detalles originales. 4 recámaras, patio central y terraza.\",\n                Price = 5800000,\n                Area = 320,\n                Zone = Zone.Centro,\n                Address = \"Calle Hidalgo 123, Centro\",\n                Bedrooms = 4,\n                Bathrooms = 3,\n                ParkingSpots = 2,\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Casa+Colonial\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-45),\n                ClosedDate = DateTime.UtcNow.AddDays(-5),\n                CreatedAt = DateTime.UtcNow.AddDays(-45),\n                UpdatedAt = DateTime.UtcNow.AddDays(-5),\n                AdvisorId = 5\n            },\n            new Property\n            {\n                PropertyId = \"DEPTO-NORTE-78901\",\n                PropertyCode = \"DEPTO-NORTE-78901\",\n                Type = PropertyType.Departamento,\n                Status = PropertyStatus.EnVenta,\n                Title = \"Departamento nuevo con amenidades\",\n                Description = \"Departamento de estreno con 3 recámaras, amenidades completas: alberca, gym, salón de eventos.\",\n                Price = 2950000,\n                Area = 110,\n                Zone = Zone.Norte,\n                Address = \"Residencial Bosques del Norte, Torre B 402\",\n                Bedrooms = 3,\n                Bathrooms = 2,\n                ParkingSpots = 2,\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Depto+Nuevo\\\", \\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Amenidades\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-8),\n                CreatedAt = DateTime.UtcNow.AddDays(-8),\n                UpdatedAt = DateTime.UtcNow.AddDays(-8),\n                AdvisorId = 2\n            },\n            new Property\n            {\n                PropertyId = \"TERRENO-ESTE-34567\",\n                PropertyCode = \"TERRENO-ESTE-34567\",\n                Type = PropertyType.Terreno,\n                Status = PropertyStatus.EnVenta,\n                Title = \"Terreno residencial con proyecto aprobado\",\n                Description = \"Terreno con proyecto arquitectónico aprobado para 6 townhouses. Excelente ubicación residencial.\",\n                Price = 3200000,\n                Area = 600,\n                Zone = Zone.Este,\n                Address = \"Privada Los Cedros s/n\",\n                HasImages = false,\n                ImageUrls = \"[]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-12),\n                CreatedAt = DateTime.UtcNow.AddDays(-12),\n                UpdatedAt = DateTime.UtcNow.AddDays(-12),\n                AdvisorId = 1\n            },\n            new Property\n            {\n                PropertyId = \"LOCAL-SUR-45678\",\n                PropertyCode = \"LOCAL-SUR-45678\",\n                Type = PropertyType.LocalComercial,\n                Status = PropertyStatus.EnVenta,\n                Title = \"Local esquinero con gran afluencia\",\n                Description = \"Local comercial en esquina con doble acceso, ideal para restaurante o retail. Instalaciones completas.\",\n                Price = 4500000,\n                Area = 150,\n                Zone = Zone.Sur,\n                Address = \"Av. Universidad esquina con Morelos\",\n                Bathrooms = 2,\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Local+Esquinero\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-18),\n                CreatedAt = DateTime.UtcNow.AddDays(-18),\n                UpdatedAt = DateTime.UtcNow.AddDays(-18),\n                AdvisorId = 3\n            },\n            new Property\n            {\n                PropertyId = \"CASA-SUR-56780\",\n                PropertyCode = \"CASA-SUR-56780\",\n                Type = PropertyType.Casa,\n                Status = PropertyStatus.EnAlquiler,\n                Title = \"Casa amueblada en privada\",\n                Description = \"Casa completamente amueblada y equipada en privada con seguridad 24/7. Lista para habitar.\",\n                Price = 28000,\n                Area = 180,\n                Zone = Zone.Sur,\n                Address = \"Privada Las Palmas 45\",\n                Bedrooms = 3,\n                Bathrooms = 2,\n                ParkingSpots = 2,\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Casa+Amueblada\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-6),\n                CreatedAt = DateTime.UtcNow.AddDays(-6),\n                UpdatedAt = DateTime.UtcNow.AddDays(-6),\n                AdvisorId = 4\n            },\n            new Property\n            {\n                PropertyId = \"OFICINA-CENTRO-67891\",\n                PropertyCode = \"OFICINA-CENTRO-67891\",\n                Type = PropertyType.Oficina,\n                Status = PropertyStatus.NoDisponible,\n                Title = \"Oficina en remodelación\",\n                Description = \"Oficina en proceso de remodelación. Estará disponible próximamente con acabados de primera.\",\n                Price = 35000,\n                Area = 90,\n                Zone = Zone.Centro,\n                Address = \"Edificio Central, Piso 5\",\n                Bathrooms = 1,\n                ParkingSpots = 2,\n                HasImages = false,\n                ImageUrls = \"[]\",\n                AvailableDate = DateTime.UtcNow.AddDays(30),\n                ClosedDate = DateTime.UtcNow.AddDays(-2),\n                CreatedAt = DateTime.UtcNow.AddDays(-22),\n                UpdatedAt = DateTime.UtcNow.AddDays(-2),\n                AdvisorId = 5\n            },\n            new Property\n            {\n                PropertyId = \"DEPTO-OESTE-89012\",\n                PropertyCode = \"DEPTO-OESTE-89012\",\n                Type = PropertyType.Departamento,\n                Status = PropertyStatus.EnVenta,\n                Title = \"Penthouse con terraza privada\",\n                Description = \"Exclusivo penthouse de 2 niveles con terraza de 100m², jacuzzi y vista 360°. Acabados de lujo.\",\n                Price = 8900000,\n                Area = 280,\n                Zone = Zone.Oeste,\n                Address = \"Residencial Altavista, Penthouse 1\",\n                Bedrooms = 4,\n                Bathrooms = 4,\n                ParkingSpots = 3,\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Penthouse\\\", \\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Terraza\\\", \\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Vista\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-14),\n                CreatedAt = DateTime.UtcNow.AddDays(-14),\n                UpdatedAt = DateTime.UtcNow.AddDays(-14),\n                AdvisorId = 1\n            },\n            new Property\n            {\n                PropertyId = \"TERRENO-NORTE-90123\",\n                PropertyCode = \"TERRENO-NORTE-90123\",\n                Type = PropertyType.Terreno,\n                Status = PropertyStatus.EnAnticredito,\n                Title = \"Terreno industrial con bodega\",\n                Description = \"Terreno con bodega de 200m² construida, ideal para uso industrial o logístico. Fácil acceso.\",\n                Price = 6500000,\n                Area = 1000,\n                Zone = Zone.Norte,\n                Address = \"Parque Industrial Norte, Lote 12\",\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Terreno+Industrial\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-28),\n                CreatedAt = DateTime.UtcNow.AddDays(-28),\n                UpdatedAt = DateTime.UtcNow.AddDays(-28),\n                AdvisorId = 2\n            },\n            new Property\n            {\n                PropertyId = \"CASA-ESTE-01234\",\n                PropertyCode = \"CASA-ESTE-01234\",\n                Type = PropertyType.Casa,\n                Status = PropertyStatus.EnVenta,\n                Title = \"Casa minimalista con alberca\",\n                Description = \"Diseño minimalista moderno, 3 recámaras con baño, alberca, jardín y pérgola. Smart home.\",\n                Price = 6200000,\n                Area = 300,\n                Zone = Zone.Este,\n                Address = \"Fraccionamiento Los Robles 789\",\n                Bedrooms = 3,\n                Bathrooms = 3,\n                ParkingSpots = 2,\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Casa+Minimalista\\\", \\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Alberca\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-11),\n                CreatedAt = DateTime.UtcNow.AddDays(-11),\n                UpdatedAt = DateTime.UtcNow.AddDays(-11),\n                AdvisorId = 3\n            },\n            new Property\n            {\n                PropertyId = \"LOCAL-NORTE-12346\",\n                PropertyCode = \"LOCAL-NORTE-12346\",\n                Type = PropertyType.LocalComercial,\n                Status = PropertyStatus.EnAlquiler,\n                Title = \"Local en centro comercial premium\",\n                Description = \"Local comercial en centro comercial de alto nivel. Excelente ubicación, alto tráfico de clientes.\",\n                Price = 45000,\n                Area = 120,\n                Zone = Zone.Norte,\n                Address = \"Centro Comercial Plaza Norte, Local 201\",\n                Bathrooms = 1,\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Local+Premium\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-9),\n                CreatedAt = DateTime.UtcNow.AddDays(-9),\n                UpdatedAt = DateTime.UtcNow.AddDays(-9),\n                AdvisorId = 4\n            },\n            new Property\n            {\n                PropertyId = \"OFICINA-SUR-23457\",\n                PropertyCode = \"OFICINA-SUR-23457\",\n                Type = PropertyType.Oficina,\n                Status = PropertyStatus.EnVenta,\n                Title = \"Oficina con bodega en parque empresarial\",\n                Description = \"Oficina con área de bodega integrada, ideal para empresas de distribución. Seguridad 24/7.\",\n                Price = 3800000,\n                Area = 200,\n                Zone = Zone.Sur,\n                Address = \"Parque Empresarial Sur, Módulo 15\",\n                Bathrooms = 2,\n                ParkingSpots = 4,\n                HasImages = false,\n                ImageUrls = \"[]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-16),\n                CreatedAt = DateTime.UtcNow.AddDays(-16),\n                UpdatedAt = DateTime.UtcNow.AddDays(-16),\n                AdvisorId = 5\n            },\n            new Property\n            {\n                PropertyId = \"DEPTO-SUR-34568\",\n                PropertyCode = \"DEPTO-SUR-34568\",\n                Type = PropertyType.Departamento,\n                Status = PropertyStatus.EnAlquiler,\n                Title = \"Departamento amueblado para ejecutivos\",\n                Description = \"Departamento totalmente amueblado, servicios incluidos, ideal para ejecutivos. Estancia corta o larga.\",\n                Price = 18000,\n                Area = 75,\n                Zone = Zone.Sur,\n                Address = \"Torre Ejecutiva Sur 305\",\n                Bedrooms = 1,\n                Bathrooms = 1,\n                ParkingSpots = 1,\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Depto+Ejecutivo\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-4),\n                CreatedAt = DateTime.UtcNow.AddDays(-4),\n                UpdatedAt = DateTime.UtcNow.AddDays(-4),\n                AdvisorId = 1\n            },\n            new Property\n            {\n                PropertyId = \"CASA-OESTE-45679\",\n                PropertyCode = \"CASA-OESTE-45679\",\n                Type = PropertyType.Casa,\n                Status = PropertyStatus.EnVenta,\n                Title = \"Casa campestre con terreno amplio\",\n                Description = \"Casa estilo campestre en terreno de 800m², jardín, área de asador, pozo de agua propio.\",\n                Price = 4800000,\n                Area = 350,\n                Zone = Zone.Oeste,\n                Address = \"Camino Real a la Sierra Km 5\",\n                Bedrooms = 4,\n                Bathrooms = 3,\n                ParkingSpots = 3,\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Casa+Campestre\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-21),\n                CreatedAt = DateTime.UtcNow.AddDays(-21),\n                UpdatedAt = DateTime.UtcNow.AddDays(-21),\n                AdvisorId = 2\n            },\n            new Property\n            {\n                PropertyId = \"TERRENO-CENTRO-56781\",\n                PropertyCode = \"TERRENO-CENTRO-56781\",\n                Type = PropertyType.Terreno,\n                Status = PropertyStatus.EnVenta,\n                Title = \"Terreno urbano céntrico con plusvalía\",\n                Description = \"Terreno plano en zona de alta plusvalía, ideal para desarrollo vertical. Uso de suelo mixto.\",\n                Price = 12000000,\n                Area = 450,\n                Zone = Zone.Centro,\n                Address = \"Calle Juárez 567\",\n                HasImages = false,\n                ImageUrls = \"[]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-35),\n                CreatedAt = DateTime.UtcNow.AddDays(-35),\n                UpdatedAt = DateTime.UtcNow.AddDays(-35),\n                AdvisorId = 3\n            },\n            new Property\n            {\n                PropertyId = \"LOCAL-OESTE-67892\",\n                PropertyCode = \"LOCAL-OESTE-67892\",\n                Type = PropertyType.LocalComercial,\n                Status = PropertyStatus.EnVenta,\n                Title = \"Local comercial con estacionamiento propio\",\n                Description = \"Local con 10 cajones de estacionamiento exclusivos. Zona de alto crecimiento comercial.\",\n                Price = 5500000,\n                Area = 180,\n                Zone = Zone.Oeste,\n                Address = \"Blvd. Poniente 1234\",\n                Bathrooms = 2,\n                ParkingSpots = 10,\n                HasImages = true,\n                ImageUrls = \"[\\\"https://placehold.co/800x600/0066CC/FFFFFF/png?text=Local+con+Estacionamiento\\\"]\",\n                AvailableDate = DateTime.UtcNow.AddDays(-13),\n                CreatedAt = DateTime.UtcNow.AddDays(-13),\n                UpdatedAt = DateTime.UtcNow.AddDays(-13),\n                AdvisorId = 4\n            }\n        };\n\n        await context.Properties.AddRangeAsync(properties);\n        await context.SaveChangesAsync();\n    }\n}\n","size_bytes":22732},"RealEstateAPI/obj/Debug/net8.0/RealEstateAPI.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"RealEstateAPI\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+9ab2004da75bca7ba45f20b2b9016653ceb23825\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"RealEstateAPI\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"RealEstateAPI\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":991},"RealEstateAPI/obj/Debug/net8.0/RealEstateAPI.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753}},"version":1}